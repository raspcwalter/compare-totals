"use client"

import { useState } from "react"
import { createThirdwebClient, prepareTransaction, sendTransaction } from "thirdweb"
import { generateAccount } from "thirdweb/wallets"
import { sepolia } from "thirdweb/chains"

function NebulaTransactionComponent() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [result, setResult] = useState(null)
  const [logs, setLogs] = useState([])
  const [accountAddress, setAccountAddress] = useState("")
  const [recipient, setRecipient] = useState("0xC08857A0D0811Fc5BeDdD42931c3E5e5a6711523")
  const [amount, setAmount] = useState("0.001")
  const [isWaitingForFunding, setIsWaitingForFunding] = useState(false)
  const [transactionState, setTransactionState] = useState(null)

  const addLog = (message) => {
    setLogs((prevLogs) => [...prevLogs, { time: new Date().toLocaleTimeString(), message }])
  }

  const initiateTransaction = async () => {
    setLoading(true)
    setError(null)
    setResult(null)
    setLogs([])
    setIsWaitingForFunding(false)

    try {
      // Check for required environment variables
      const secretKey = import.meta.env.VITE_THIRDWEB_SECRET_KEY
      if (!secretKey) {
        throw new Error("VITE_THIRDWEB_SECRET_KEY is missing in environment variables")
      }

      // Initialize Thirdweb client
      addLog("Initializing Thirdweb client...")
      const client = createThirdwebClient({ secretKey })

      // Generate an account
      addLog("Generating account...")
      const account = await generateAccount({ client })
      setAccountAddress(account.address)
      addLog(`Generated account address: ${account.address}`)

      // Pause and wait for funding
      addLog("⚠️ IMPORTANT: Please fund this wallet address with some Sepolia ETH before continuing")
      addLog("You can get Sepolia ETH from a faucet like https://sepoliafaucet.com/")
      setIsWaitingForFunding(true)
      setLoading(false)

      // Store account and client in state for later use
      setTransactionState({ account, client, secretKey })
    } catch (error) {
      setError(error.message)
      addLog(`Error: ${error.message}`)
      if (error.cause) {
        addLog(`Cause: ${error.cause}`)
      }
      setLoading(false)
    }
  }

  const continueTransaction = async () => {
    setLoading(true)
    setIsWaitingForFunding(false)

    try {
      const { account, client, secretKey } = transactionState

      // Make request to Nebula API
      addLog("Sending request to Nebula API...")
      const response = await fetch("https://nebula-api.thirdweb.com/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-secret-key": secretKey,
        },
        body: JSON.stringify({
          message: `send ${amount} ETH to ${recipient} on sepolia`,
          execute_config: {
            mode: "client",
            signer_wallet_address: account.address,
          },
        }),
      })

      // Check if the response is successful
      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`API request failed with status ${response.status}: ${errorText}`)
      }

      const data = await response.json()
      addLog("Nebula API response received")

      // Process the response
      if (data.actions && data.actions.length > 0) {
        const action = data.actions[0]
        addLog(`Processing action: ${action.type}`)

        if (action.data) {
          const txData = JSON.parse(action.data)
          addLog("Transaction data received")

          // Prepare the transaction
          addLog("Preparing transaction...")
          const transaction = prepareTransaction({
            to: txData.to,
            data: txData.data,
            value: BigInt(txData.value),
            chain: sepolia,
            client,
          })

          // Send the transaction
          addLog("Sending transaction...")
          const txResult = await sendTransaction({
            transaction,
            account,
          })

          addLog("Transaction successful!")
          addLog(`Transaction hash: ${txResult.transactionHash}`)
          setResult(txResult)
        } else {
          addLog("No transaction data found in the action")
        }
      } else {
        addLog("No actions found in the response")
      }
    } catch (error) {
      setError(error.message)
      addLog(`Error: ${error.message}`)
      if (error.cause) {
        addLog(`Cause: ${error.cause}`)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Thirdweb Nebula Transaction</h1>

      <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Recipient Address</label>
            <input
              type="text"
              value={recipient}
              onChange={(e) => setRecipient(e.target.value)}
              className="w-full p-2 border rounded"
              placeholder="0x..."
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Amount (ETH)</label>
            <input
              type="text"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className="w-full p-2 border rounded"
              placeholder="0.001"
            />
          </div>

          <button
            onClick={initiateTransaction}
            disabled={loading || isWaitingForFunding}
            className={`w-full p-3 rounded font-medium ${
              loading || isWaitingForFunding
                ? "bg-gray-300 cursor-not-allowed"
                : "bg-blue-600 text-white hover:bg-blue-700"
            }`}
          >
            {loading ? "Processing..." : "Send Transaction"}
          </button>
          {isWaitingForFunding && (
            <div className="mt-4">
              <button
                onClick={continueTransaction}
                className="w-full p-3 rounded font-medium bg-green-600 text-white hover:bg-green-700"
              >
                I've Funded the Wallet - Continue
              </button>
              <p className="text-sm text-gray-600 mt-2">
                Please fund the wallet address shown above with Sepolia ETH before continuing
              </p>
            </div>
          )}
        </div>

        <div className="border rounded p-4">
          <h2 className="font-medium mb-2">Account Information</h2>
          {accountAddress ? (
            <div className="break-all">
              <p>
                <span className="font-medium">Address:</span> {accountAddress}
              </p>
            </div>
          ) : (
            <p className="text-gray-500">Account will be generated when transaction is initiated</p>
          )}
        </div>
      </div>

      {error && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded">
          <h2 className="text-red-600 font-medium mb-1">Error</h2>
          <p className="text-red-700">{error}</p>
        </div>
      )}

      {result && (
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded">
          <h2 className="text-green-600 font-medium mb-2">Transaction Successful</h2>
          <div className="space-y-1">
            <p>
              <span className="font-medium">Transaction Hash:</span> {result.transactionHash}
            </p>
          </div>
        </div>
      )}

      <div className="border rounded">
        <h2 className="font-medium p-3 border-b">Transaction Logs</h2>
        <div className="h-64 overflow-y-auto p-3 bg-gray-50">
          {logs.length === 0 ? (
            <p className="text-gray-500">Logs will appear here when you initiate a transaction</p>
          ) : (
            logs.map((log, index) => (
              <div key={index} className="mb-1 text-sm">
                <span className="text-gray-500 mr-2">[{log.time}]</span>
                <span>{log.message}</span>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  )
}

export default NebulaTransactionComponent