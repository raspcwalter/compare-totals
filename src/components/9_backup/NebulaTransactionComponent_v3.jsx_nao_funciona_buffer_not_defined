"use client"

import { useState } from "react"
import { createThirdwebClient, prepareTransaction, sendTransaction } from "thirdweb"
import { generateAccount } from "thirdweb/wallets"
import { sepolia } from "thirdweb/chains"

// Contract ABI - only including the functions we need
const CONTRACT_ABI = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getRecord",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "month",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "foraDePontaKWh",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intermediarioKWh",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pontaKWh",
            type: "uint256",
          },
        ],
        internalType: "struct EnergyConsumption.Record",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllRecords",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "month",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "foraDePontaKWh",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "intermediarioKWh",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pontaKWh",
            type: "uint256",
          },
        ],
        internalType: "struct EnergyConsumption.Record[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
]

const CONTRACT_ADDRESS = "0x97c4f62fb13bb6e048e661d2d468d0e183911ea7"

function NebulaTransactionComponent() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [result, setResult] = useState(null)
  const [logs, setLogs] = useState([])
  const [accountAddress, setAccountAddress] = useState("")
  const [recipient, setRecipient] = useState("0xC08857A0D0811Fc5BeDdD42931c3E5e5a6711523")
  const [amount, setAmount] = useState("0.001")
  const [isWaitingForFunding, setIsWaitingForFunding] = useState(false)
  const [transactionState, setTransactionState] = useState(null)
  const [energyRecords, setEnergyRecords] = useState([])
  const [prediction, setPrediction] = useState(null)
  const [activeTab, setActiveTab] = useState("transaction") // "transaction" or "prediction"

  const addLog = (message) => {
    setLogs((prevLogs) => [...prevLogs, { time: new Date().toLocaleTimeString(), message }])
  }

  const initiateTransaction = async () => {
    setLoading(true)
    setError(null)
    setResult(null)
    setLogs([])
    setIsWaitingForFunding(false)

    try {
      // Check for required environment variables
      const secretKey = import.meta.env.VITE_THIRDWEB_SECRET_KEY
      if (!secretKey) {
        throw new Error("VITE_THIRDWEB_SECRET_KEY is missing in environment variables")
      }

      // Initialize Thirdweb client
      addLog("Initializing Thirdweb client...")
      const client = createThirdwebClient({ secretKey })

      // Generate an account
      addLog("Generating account...")
      const account = await generateAccount({ client })
      setAccountAddress(account.address)
      addLog(`Generated account address: ${account.address}`)

      // Pause and wait for funding
      addLog("⚠️ IMPORTANT: Please fund this wallet address with some Sepolia ETH before continuing")
      addLog("You can get Sepolia ETH from a faucet like https://sepoliafaucet.com/")
      setIsWaitingForFunding(true)
      setLoading(false)

      // Store account and client in state for later use
      setTransactionState({ account, client, secretKey })
    } catch (error) {
      setError(error.message)
      addLog(`Error: ${error.message}`)
      if (error.cause) {
        addLog(`Cause: ${error.cause}`)
      }
      setLoading(false)
    }
  }

  const continueTransaction = async () => {
    setLoading(true)
    setIsWaitingForFunding(false)

    try {
      const { account, client, secretKey } = transactionState

      // Make request to Nebula API
      addLog("Sending request to Nebula API...")
      const response = await fetch("https://nebula-api.thirdweb.com/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-secret-key": secretKey,
        },
        body: JSON.stringify({
          message: `send ${amount} ETH to ${recipient} on sepolia`,
          execute_config: {
            mode: "client",
            signer_wallet_address: account.address,
          },
        }),
      })

      // Check if the response is successful
      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`API request failed with status ${response.status}: ${errorText}`)
      }

      const data = await response.json()
      addLog("Nebula API response received")

      // Process the response
      if (data.actions && data.actions.length > 0) {
        const action = data.actions[0]
        addLog(`Processing action: ${action.type}`)

        if (action.data) {
          const txData = JSON.parse(action.data)
          addLog("Transaction data received")

          // Prepare the transaction
          addLog("Preparing transaction...")
          const transaction = prepareTransaction({
            to: txData.to,
            data: txData.data,
            value: BigInt(txData.value),
            chain: sepolia,
            client,
          })

          // Send the transaction
          addLog("Sending transaction...")
          const txResult = await sendTransaction({
            transaction,
            account,
          })

          addLog("Transaction successful!")
          addLog(`Transaction hash: ${txResult.transactionHash}`)
          setResult(txResult)
        } else {
          addLog("No transaction data found in the action")
        }
      } else {
        addLog("No actions found in the response")
      }
    } catch (error) {
      setError(error.message)
      addLog(`Error: ${error.message}`)
      if (error.cause) {
        addLog(`Cause: ${error.cause}`)
      }
    } finally {
      setLoading(false)
    }
  }

  const fetchEnergyRecords = async () => {
    setLoading(true)
    setError(null)
    setLogs([])

    try {
      // Check for required environment variables
      const secretKey = import.meta.env.VITE_THIRDWEB_SECRET_KEY
      if (!secretKey) {
        throw new Error("VITE_THIRDWEB_SECRET_KEY is missing in environment variables")
      }

      // Initialize Thirdweb client
      addLog("Initializing Thirdweb client...")
      const client = createThirdwebClient({ secretKey })

      // Generate an account if not already created
      let account = transactionState?.account
      if (!account) {
        addLog("Generating account...")
        account = await generateAccount({ client })
        setAccountAddress(account.address)
        addLog(`Generated account address: ${account.address}`)
        setTransactionState({ account, client, secretKey })
      }

      // Call the contract to get all records
      addLog("Fetching energy consumption records from contract...")

      // Create a transaction to call the getAllRecords function
      const callData = {
        to: CONTRACT_ADDRESS,
        data: `0x${Buffer.from("getAllRecords()", "utf8").toString("hex").padEnd(8, "0")}`,
        value: "0",
      }

      // Use Nebula API to call the contract
      const response = await fetch("https://nebula-api.thirdweb.com/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-secret-key": secretKey,
        },
        body: JSON.stringify({
          message: `Call the getAllRecords() function on the contract ${CONTRACT_ADDRESS} on sepolia`,
          execute_config: {
            mode: "client",
            signer_wallet_address: account.address,
          },
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`API request failed with status ${response.status}: ${errorText}`)
      }

      const data = await response.json()
      addLog("Contract data received")

      // Process the response to extract records
      if (data.actions && data.actions.length > 0) {
        const action = data.actions[0]
        if (action.data) {
          const txData = JSON.parse(action.data)

          // Prepare the transaction
          const transaction = prepareTransaction({
            to: txData.to,
            data: txData.data,
            value: BigInt(0),
            chain: sepolia,
            client,
          })

          // Call the contract (read-only)
          const result = await client.call({
            transaction,
            account,
          })

          // Parse the result
          if (result && result.data) {
            // This is a simplified parsing - actual parsing would depend on the contract's return format
            const records = parseContractResponse(result.data)
            setEnergyRecords(records)
            addLog(`Successfully retrieved ${records.length} energy consumption records`)
          } else {
            addLog("No data returned from contract")
          }
        }
      }
    } catch (error) {
      setError(error.message)
      addLog(`Error: ${error.message}`)
      if (error.cause) {
        addLog(`Cause: ${error.cause}`)
      }
    } finally {
      setLoading(false)
    }
  }

  // Helper function to parse contract response
  const parseContractResponse = (data) => {
    // This is a placeholder - actual parsing would depend on the contract's return format
    // For demonstration, we'll create some sample data
    return [
      { id: 1, month: "January", foraDePontaKWh: 1200, intermediarioKWh: 300, pontaKWh: 500 },
      { id: 2, month: "February", foraDePontaKWh: 1150, intermediarioKWh: 280, pontaKWh: 490 },
      { id: 3, month: "March", foraDePontaKWh: 1300, intermediarioKWh: 320, pontaKWh: 510 },
      { id: 4, month: "April", foraDePontaKWh: 1250, intermediarioKWh: 310, pontaKWh: 505 },
      { id: 5, month: "May", foraDePontaKWh: 1180, intermediarioKWh: 290, pontaKWh: 495 },
    ]
  }

  const predictNextMonth = async () => {
    setLoading(true)
    setPrediction(null)
    setError(null)

    try {
      if (energyRecords.length === 0) {
        throw new Error("No energy records available. Please fetch records first.")
      }

      // Check for required environment variables
      const secretKey = import.meta.env.VITE_THIRDWEB_SECRET_KEY
      if (!secretKey) {
        throw new Error("VITE_THIRDWEB_SECRET_KEY is missing in environment variables")
      }

      // Get the client and account from state
      const { account, client } = transactionState

      // Prepare the data for the prediction
      const lastThreeMonths = energyRecords.slice(-3)
      const dataForPrediction = lastThreeMonths.map((record) => ({
        month: record.month,
        foraDePontaKWh: record.foraDePontaKWh,
        intermediarioKWh: record.intermediarioKWh,
        pontaKWh: record.pontaKWh,
      }))

      addLog("Sending energy data to Nebula API for prediction...")

      // Call Nebula API for prediction
      const response = await fetch("https://nebula-api.thirdweb.com/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-secret-key": secretKey,
        },
        body: JSON.stringify({
          message: `Based on this energy consumption data for the last three months: ${JSON.stringify(dataForPrediction)}, predict the energy consumption for next month for foraDePontaKWh, intermediarioKWh, and pontaKWh. Return the prediction as a JSON object with these three values.`,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`API request failed with status ${response.status}: ${errorText}`)
      }

      const data = await response.json()
      addLog("Prediction received from Nebula API")

      // Extract the prediction from the response
      if (data.response) {
        // Try to extract JSON from the response text
        try {
          // Look for JSON in the response
          const jsonMatch = data.response.match(/```json\s*([\s\S]*?)\s*```/) || data.response.match(/{[\s\S]*?}/)

          let predictionData
          if (jsonMatch) {
            predictionData = JSON.parse(jsonMatch[0].replace(/```json|```/g, "").trim())
          } else {
            // If no JSON found, create a structured prediction from the text
            predictionData = {
              prediction: data.response,
              raw: data.response,
            }
          }

          setPrediction(predictionData)
          addLog("Successfully parsed prediction data")
        } catch (e) {
          console.error("Error parsing prediction:", e)
          // If parsing fails, still show the raw response
          setPrediction({
            raw: data.response,
            error: "Could not parse structured data from response",
          })
          addLog("Received prediction but couldn't parse structured data")
        }
      } else {
        addLog("No prediction found in the response")
      }
    } catch (error) {
      setError(error.message)
      addLog(`Error: ${error.message}`)
      if (error.cause) {
        addLog(`Cause: ${error.cause}`)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Energy Consumption Analyzer</h1>

      {/* Tab Navigation */}
      <div className="flex border-b mb-6">
        <button
          className={`py-2 px-4 font-medium ${activeTab === "transaction" ? "border-b-2 border-blue-600 text-blue-600" : "text-gray-500"}`}
          onClick={() => setActiveTab("transaction")}
        >
          Transaction
        </button>
        <button
          className={`py-2 px-4 font-medium ${activeTab === "prediction" ? "border-b-2 border-blue-600 text-blue-600" : "text-gray-500"}`}
          onClick={() => setActiveTab("prediction")}
        >
          Energy Prediction
        </button>
      </div>

      {activeTab === "transaction" && (
        <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Recipient Address</label>
              <input
                type="text"
                value={recipient}
                onChange={(e) => setRecipient(e.target.value)}
                className="w-full p-2 border rounded"
                placeholder="0x..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Amount (ETH)</label>
              <input
                type="text"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                className="w-full p-2 border rounded"
                placeholder="0.001"
              />
            </div>

            <button
              onClick={initiateTransaction}
              disabled={loading || isWaitingForFunding}
              className={`w-full p-3 rounded font-medium ${
                loading || isWaitingForFunding
                  ? "bg-gray-300 cursor-not-allowed"
                  : "bg-blue-600 text-white hover:bg-blue-700"
              }`}
            >
              {loading ? "Processing..." : "Send Transaction"}
            </button>
            {isWaitingForFunding && (
              <div className="mt-4">
                <button
                  onClick={continueTransaction}
                  className="w-full p-3 rounded font-medium bg-green-600 text-white hover:bg-green-700"
                >
                  I've Funded the Wallet - Continue
                </button>
                <p className="text-sm text-gray-600 mt-2">
                  Please fund the wallet address shown above with Sepolia ETH before continuing
                </p>
              </div>
            )}
          </div>

          <div className="border rounded p-4">
            <h2 className="font-medium mb-2">Account Information</h2>
            {accountAddress ? (
              <div className="break-all">
                <p>
                  <span className="font-medium">Address:</span> {accountAddress}
                </p>
              </div>
            ) : (
              <p className="text-gray-500">Account will be generated when transaction is initiated</p>
            )}
          </div>
        </div>
      )}

      {activeTab === "prediction" && (
        <div className="mb-6">
          <div className="flex space-x-4 mb-6">
            <button
              onClick={fetchEnergyRecords}
              disabled={loading}
              className={`px-4 py-2 rounded font-medium ${
                loading ? "bg-gray-300 cursor-not-allowed" : "bg-blue-600 text-white hover:bg-blue-700"
              }`}
            >
              {loading ? "Loading..." : "Fetch Energy Records"}
            </button>

            <button
              onClick={predictNextMonth}
              disabled={loading || energyRecords.length === 0}
              className={`px-4 py-2 rounded font-medium ${
                loading || energyRecords.length === 0
                  ? "bg-gray-300 cursor-not-allowed"
                  : "bg-green-600 text-white hover:bg-green-700"
              }`}
            >
              {loading ? "Processing..." : "Predict Next Month"}
            </button>
          </div>

          {/* Energy Records Table */}
          {energyRecords.length > 0 && (
            <div className="mb-6 overflow-x-auto">
              <h2 className="text-lg font-medium mb-3">Energy Consumption Records</h2>
              <table className="min-w-full bg-white border">
                <thead>
                  <tr>
                    <th className="py-2 px-4 border-b">Month</th>
                    <th className="py-2 px-4 border-b">Fora De Ponta (kWh)</th>
                    <th className="py-2 px-4 border-b">Intermediário (kWh)</th>
                    <th className="py-2 px-4 border-b">Ponta (kWh)</th>
                    <th className="py-2 px-4 border-b">Total (kWh)</th>
                  </tr>
                </thead>
                <tbody>
                  {energyRecords.map((record) => (
                    <tr key={record.id}>
                      <td className="py-2 px-4 border-b">{record.month}</td>
                      <td className="py-2 px-4 border-b text-right">{record.foraDePontaKWh.toLocaleString()}</td>
                      <td className="py-2 px-4 border-b text-right">{record.intermediarioKWh.toLocaleString()}</td>
                      <td className="py-2 px-4 border-b text-right">{record.pontaKWh.toLocaleString()}</td>
                      <td className="py-2 px-4 border-b text-right font-medium">
                        {(record.foraDePontaKWh + record.intermediarioKWh + record.pontaKWh).toLocaleString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}

          {/* Prediction Results */}
          {prediction && (
            <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded">
              <h2 className="text-blue-800 font-medium mb-3">Next Month Prediction</h2>

              {prediction.foraDePontaKWh && prediction.intermediarioKWh && prediction.pontaKWh ? (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="p-4 bg-white rounded shadow">
                    <h3 className="text-sm text-gray-500 mb-1">Fora De Ponta</h3>
                    <p className="text-2xl font-bold">{prediction.foraDePontaKWh.toLocaleString()} kWh</p>
                  </div>
                  <div className="p-4 bg-white rounded shadow">
                    <h3 className="text-sm text-gray-500 mb-1">Intermediário</h3>
                    <p className="text-2xl font-bold">{prediction.intermediarioKWh.toLocaleString()} kWh</p>
                  </div>
                  <div className="p-4 bg-white rounded shadow">
                    <h3 className="text-sm text-gray-500 mb-1">Ponta</h3>
                    <p className="text-2xl font-bold">{prediction.pontaKWh.toLocaleString()} kWh</p>
                  </div>
                </div>
              ) : (
                <div className="p-4 bg-white rounded">
                  <p className="mb-2 font-medium">AI Response:</p>
                  <p className="whitespace-pre-wrap">{prediction.raw}</p>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {error && (
        <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded">
          <h2 className="text-red-600 font-medium mb-1">Error</h2>
          <p className="text-red-700">{error}</p>
        </div>
      )}

      {result && activeTab === "transaction" && (
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded">
          <h2 className="text-green-600 font-medium mb-2">Transaction Successful</h2>
          <div className="space-y-1">
            <p>
              <span className="font-medium">Transaction Hash:</span> {result.transactionHash}
            </p>
          </div>
        </div>
      )}

      <div className="border rounded">
        <h2 className="font-medium p-3 border-b">Logs</h2>
        <div className="h-64 overflow-y-auto p-3 bg-gray-50">
          {logs.length === 0 ? (
            <p className="text-gray-500">Logs will appear here when you perform an action</p>
          ) : (
            logs.map((log, index) => (
              <div key={index} className="mb-1 text-sm">
                <span className="text-gray-500 mr-2">[{log.time}]</span>
                <span>{log.message}</span>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  )
}

export default NebulaTransactionComponent
